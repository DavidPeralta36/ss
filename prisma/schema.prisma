generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id       Int    @id @default(autoincrement())
  username String @unique
  email    String @unique
  password String
}

model answers {
  answer_id   Int
  survey_id   Int
  question_id Int
  answer_text String    @db.Text
  questions   questions @relation(fields: [question_id], references: [question_id], onDelete: Cascade, onUpdate: NoAction, map: "answers_ibfk_1")
  surveys     surveys   @relation(fields: [survey_id], references: [survey_id], onDelete: Cascade, onUpdate: NoAction, map: "answers_survey_id_fk")

  @@id([answer_id, question_id, survey_id])
  @@index([question_id], map: "question_id")
  @@index([survey_id], map: "survey_id")
}

model experiencialaboral {
  id                Int     @id @default(autoincrement())
  RFC               String? @db.VarChar(13)
  nombreEmpleo      String? @db.VarChar(50)
  nombreCompania    String? @db.VarChar(50)
  direccion         String? @db.VarChar(50)
  telefonoEmpleo    String? @db.VarChar(50)
  puestoDesempenado String? @db.VarChar(50)
  sueldoPromedio    String? @db.VarChar(50)
  motivoSeparacion  String? @db.VarChar(50)
  usrs              usrs?   @relation(fields: [RFC], references: [RFC], onDelete: NoAction, onUpdate: NoAction, map: "experiencialaboral_ibfk_1")

  @@index([RFC], map: "RFC")
}

model questions {
  question_id   Int                     @unique @default(autoincrement())
  survey_id     Int
  question_text String                  @db.Text
  question_type questions_question_type
  answers       answers[]
  surveys       surveys                 @relation(fields: [survey_id], references: [survey_id], onDelete: Cascade, onUpdate: NoAction, map: "questions_ibfk_1")

  @@id([question_id, survey_id])
  @@index([survey_id], map: "survey_id")
}

model surveys {
  survey_id        Int                @id @default(autoincrement())
  title            String             @db.VarChar(255)
  description      String?            @db.Text
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  estatus          String             @db.VarChar(25)
  end_date         DateTime?          @db.Date
  start_date       DateTime?          @db.Date
  answers          answers[]
  questions        questions[]
  survey_responses survey_responses[]
}

model usrs {
  id                            Int                             @id @default(autoincrement())
  RFC                           String?                         @unique(map: "unique_rfc") @db.VarChar(13)
  nombre                        String?                         @db.VarChar(50)
  username                      String?                         @unique(map: "username") @db.VarChar(15)
  edad                          String?                         @db.VarChar(3)
  direccion                     String?                         @db.VarChar(50)
  celular                       String?                         @db.VarChar(50)
  telefono                      String?                         @db.VarChar(50)
  correo                        String?                         @db.VarChar(50)
  redSocial                     String?                         @db.VarChar(50)
  tipoEmpleado                  String?                         @db.VarChar(50)
  contrato                      String?                         @db.VarChar(50)
  horario                       String?                         @db.VarChar(50)
  estado                        String?                         @db.VarChar(50)
  antiguedad                    String?                         @db.VarChar(50)
  password                      String                          @db.VarChar(100)
  img                           String?                         @db.VarChar(255)
  nivelAcceso                   String?                         @db.VarChar(255)
  puesto                        String?                         @db.VarChar(255)
  certificaciones               certificaciones[]
  cursos                        cursos[]
  experiencialaboral            experiencialaboral[]
  faltas                        faltas[]
  incapacidades                 incapacidades[]
  lenguas                       lenguas[]
  procedimientosadministrativos procedimientosadministrativos[]
  survey_responses              survey_responses[]

  @@index([RFC], map: "idx_RFC")
}

model certificaciones {
  id                Int     @id @default(autoincrement())
  RFC               String? @db.VarChar(13)
  nombreCertificado String? @db.VarChar(50)
  tipoCertificado   String? @db.VarChar(50)
  certificado       String? @db.VarChar(255)
  usrs              usrs?   @relation(fields: [RFC], references: [RFC], onDelete: NoAction, onUpdate: NoAction, map: "certificaciones_ibfk_1")

  @@index([RFC], map: "RFC")
}

model cursos {
  id          Int     @id @default(autoincrement())
  RFC         String? @db.VarChar(13)
  nombreCurso String? @db.VarChar(50)
  tipoCurso   String? @db.VarChar(50)
  certificado String? @db.VarChar(255)
  usrs        usrs?   @relation(fields: [RFC], references: [RFC], onDelete: NoAction, onUpdate: NoAction, map: "cursos_ibfk_1")

  @@index([RFC], map: "RFC")
}

model lenguas {
  id          Int     @id @default(autoincrement())
  RFC         String? @db.VarChar(13)
  lengua      String? @db.VarChar(50)
  nivel       String? @db.VarChar(50)
  certificado String? @db.VarChar(255)
  usrs        usrs?   @relation(fields: [RFC], references: [RFC], onDelete: NoAction, onUpdate: NoAction, map: "lenguas_ibfk_1")

  @@index([RFC], map: "RFC")
}

model faltas {
  id    Int     @id @default(autoincrement())
  RFC   String? @db.VarChar(13)
  fecha String? @db.VarChar(50)
  usrs  usrs?   @relation(fields: [RFC], references: [RFC], onDelete: NoAction, onUpdate: NoAction, map: "faltas_ibfk_1")

  @@index([RFC], map: "RFC")
}

model incapacidades {
  id           Int     @id @default(autoincrement())
  RFC          String? @db.VarChar(13)
  fechaInicio  String? @db.VarChar(50)
  fechaFin     String? @db.VarChar(50)
  tipoFalta    String? @db.VarChar(50)
  justificante String? @db.VarChar(50)
  usrs         usrs?   @relation(fields: [RFC], references: [RFC], onDelete: NoAction, onUpdate: NoAction, map: "incapacidades_ibfk_1")

  @@index([RFC], map: "RFC")
}

model procedimientosadministrativos {
  id                Int     @id @default(autoincrement())
  RFC               String? @db.VarChar(13)
  fechaInicio       String? @db.VarChar(50)
  fechaFin          String? @db.VarChar(50)
  tipoProcedimiento String? @db.VarChar(50)
  Estado            String? @db.VarChar(50)
  usrs              usrs?   @relation(fields: [RFC], references: [RFC], onDelete: NoAction, onUpdate: NoAction, map: "procedimientosadministrativos_ibfk_1")

  @@index([RFC], map: "RFC")
}

model survey_responses {
  response_id        Int       @id @default(autoincrement())
  user_id            Int?
  survey_id          Int?
  answer             Json?
  response_timestamp DateTime? @default(now()) @db.Timestamp(0)
  usrs               usrs?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "survey_responses_ibfk_1")
  surveys            surveys?  @relation(fields: [survey_id], references: [survey_id], onDelete: Cascade, onUpdate: NoAction, map: "survey_responses_ibfk_2")

  @@index([survey_id], map: "survey_id")
  @@index([user_id], map: "user_id")
}

enum questions_question_type {
  multiple_choice
  open_text
  checkbox
  radio
}
